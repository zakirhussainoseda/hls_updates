// File: ALU.v
// Generated by MyHDL 0.11.42
// Date: Sun Dec 10 11:36:31 2023


`timescale 1ns/10ps

module ALU (
    q,
    o,
    z,
    n,
    a,
    b,
    f,
    clk,
    rst
);
// Simple ALU.
// See ARM System Architecture "Introduction To Processor Design"

output [15:0] q;
reg [15:0] q;
output o;
reg o;
output z;
reg z;
output n;
reg n;
input [15:0] a;
input [15:0] b;
input [3:0] f;
input clk;
input rst;

reg [15:0] result;



always @(posedge clk, negedge rst) begin: ALU_ALU_FUNC
    if (rst == 0) begin
        result <= 0;
    end
    else begin
        if ((rst == 0)) begin
            result <= 0;
        end
        else if ((f == 4'b0000)) begin
            result <= 0;
        end
        else if ((f == 4'b0001)) begin
            result <= ((2 ** 16) - 1);
        end
        else if ((f == 4'b0011)) begin
            result <= ((-a) % (2 ** 16));
        end
        else if ((f == 4'b0110)) begin
            result <= ((-b) % (2 ** 16));
        end
        else if ((f == 4'b1001)) begin
            result <= (~a);
        end
        else if ((f == 4'b1010)) begin
            result <= (~b);
        end
        else if ((f == 4'b0010)) begin
            result <= a;
        end
        else if ((f == 4'b0101)) begin
            result <= b;
        end
        else if ((f == 4'b0100)) begin
            result <= (a + 1);
        end
        else if ((f == 4'b0111)) begin
            result <= (b + 1);
        end
        else if ((f == 4'b1011)) begin
            result <= (a & b);
        end
        else if ((f == 4'b1100)) begin
            result <= (a | b);
        end
        else if ((f == 4'b1101)) begin
            result <= (a ^ b);
        end
        else if ((f == 4'b1000)) begin
            result <= (a + b);
        end
    end
end


always @(result) begin: ALU_ALU_STATUS
    q = result;
    if ((result == 0)) begin
        z = 1;
    end
    else begin
        z = 0;
    end
    n = 0;
    o = 0;
end

endmodule
